"""Bazel Module for ADAS WebAssembly Components"""

module(
    name = "adas_wasm_components",
    version = "0.1.0",
    compatibility_level = 1,
)

# Use the published rules_wasm_component from GitHub
bazel_dep(name = "rules_wasm_component", version = "0.1.0")

# Add platforms dependency for constraint definitions
bazel_dep(name = "platforms", version = "0.0.11")

# Add bazel_skylib dependency  
bazel_dep(name = "bazel_skylib", version = "1.7.1")

# Add rules_rust with WASI P2 support
bazel_dep(name = "rules_rust", version = "0.62.0")

# Use latest rules_wasm_component with hybrid strategy support
git_override(
    module_name = "rules_wasm_component",
    remote = "https://github.com/pulseengine/rules_wasm_component.git",
    commit = "81572e45d06a6ddfcadea0b886d60dc966141171",  # Latest: wrapper fix for multi-interface components
)

# Use rules_rust fork with WASI P2 support
git_override(
    module_name = "rules_rust",
    remote = "https://github.com/avrabe/rules_rust.git",
    commit = "1945773a",  # Latest fix including rust_toolchain
)

# Configure WASM toolchain with hybrid strategy to use forked wit-bindgen with export macro fix
wasm_toolchain = use_extension("@rules_wasm_component//wasm:extensions.bzl", "wasm_toolchain")
wasm_toolchain.register(
    name = "adas_tools",
    strategy = "hybrid",  # Use hybrid strategy for forked wit-bindgen
    wit_bindgen_url = "https://github.com/avrabe/wit-bindgen.git",
    wit_bindgen_commit = "23796bc4caa7e224d3dce9cc044ed89bcfca074a",  # Fixed export macro visibility for multi-interface components
)
use_repo(wasm_toolchain, "adas_tools_toolchains")

# Use system toolchain for ADAS components
register_toolchains("@adas_tools_toolchains//:wasm_tools_toolchain")

# Configure Rust toolchain for WASM
rust = use_extension("@rules_rust//rust:extensions.bzl", "rust")
rust.toolchain(
    edition = "2021",
    versions = ["1.82.0"],
    extra_target_triples = [
        "wasm32-wasip2",
        "wasm32-wasip1", 
        "wasm32-unknown-unknown",
    ],
)
use_repo(rust, "rust_toolchains")

# Register the Rust toolchain
register_toolchains("@rust_toolchains//:all")