package adas:object-detection@0.1.0;

interface detection-engine {
    record config {
        model-name: string,
        confidence-threshold: f32,
        nms-threshold: f32,
        max-detections: u32,
        input-resolution: resolution,
        classes-enabled: list<string>,
    }

    record resolution {
        width: u32,
        height: u32,
    }

    record detection {
        object-id: u32,
        class-name: string,
        confidence: f32,
        bounding-box: bounding-box,
        features: list<f32>,
        timestamp: u64,
    }

    record bounding-box {
        x: f32,
        y: f32,
        width: f32,
        height: f32,
    }

    record frame-result {
        detections: list<detection>,
        processing-time-ms: f32,
        frame-number: u64,
        timestamp: u64,
    }

    enum status {
        inactive,
        initializing,
        active,
        error,
    }

    record stats {
        frames-processed: u64,
        total-detections: u64,
        average-processing-time-ms: f32,
        cpu-percent: f32,
        memory-mb: u32,
        gpu-percent: f32,
    }

    initialize: func(cfg: config) -> result<_, string>;
    start: func() -> result<_, string>;
    stop: func() -> result<_, string>;
    process-frame: func(image-data: string) -> result<frame-result, string>;
    get-status: func() -> status;
    get-stats: func() -> stats;
    reset-stats: func();
}

interface diagnostics {
    enum health {
        healthy,
        degraded,
        critical,
        offline,
    }

    record test-result {
        name: string,
        passed: bool,
        message: string,
        duration-ms: f32,
    }

    get-health: func() -> health;
    run-diagnostics: func() -> list<test-result>;
    get-report: func() -> string;
}

world object-detection {
    import wasi:nn/graph@0.2.0-rc-2024-10-28;
    import wasi:nn/tensor@0.2.0-rc-2024-10-28;  
    import wasi:nn/inference@0.2.0-rc-2024-10-28;
    import wasi:nn/errors@0.2.0-rc-2024-10-28;
    
    export detection-engine;
    export diagnostics;
}
